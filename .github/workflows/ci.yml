name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  NO_COLOR: 1

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety
        pip install -e .[dev]
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/
        
    - name: Type checking with mypy
      run: |
        mypy src/ --install-types --non-interactive
        
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        # No exclusions needed currently
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        
    - name: Run tests with pytest
      run: |
        pytest -v --tb=short --cov=src/claude_setup --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        claude-bedrock-setup --version
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Install package
      run: |
        pip install dist/*.whl
        
    - name: Run integration tests
      run: |
        # Test CLI commands without actual AWS calls
        claude-bedrock-setup --help
        claude-bedrock-setup --version
        
    - name: Test package imports
      run: |
        python -c "
        import claude_setup
        print(f'Version: {claude_setup.__version__}')
        print('All imports successful')
        "

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration-test]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.lint.result }}" == "failure" ]]; then
          echo "❌ Lint job failed"
          exit 1
        fi
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ Test job failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ Build job failed"
          exit 1
        fi
        if [[ "${{ needs.integration-test.result }}" == "failure" ]]; then
          echo "❌ Integration test job failed"
          exit 1
        fi
        echo "✅ All quality gates passed"
        
    - name: Report status
      run: |
        echo "## CI Results" >> $GITHUB_STEP_SUMMARY
        echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY